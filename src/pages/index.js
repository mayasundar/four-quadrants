import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { useEffect, useRef } from "react";

export default function Home() {
  const canvasRef = useRef(null);

  useEffect(() => {
    if (canvasRef.current) {
      const canvas = canvasRef.current;
      const ctx = canvas.getContext('2d');

      const size = 600;
      canvas.style.width = size + "px";
      canvas.style.height = size + "px";

      const scale = window.devicePixelRatio;
      canvas.width = size * scale;
      canvas.height = size * scale;

      ctx.scale(scale, scale);

      ctx.translate(0.5, 0.5);
      ctx.lineWidth = 0.5;
      let s = 21
      let nX = Math.floor(size / s)
      let nY = Math.floor(size / s)
      let pX = size - nX * s
      let pY = size - nY * s

      let pL = Math.ceil(pX / 2) - 0.5
      let pT = Math.ceil(pY / 2) - 0.5
      let pR = size - nX * s - pL
      let pB = size - nY * s - pT

      function drawGrid() {
        ctx.strokeStyle = 'lightgrey'
        ctx.beginPath()

        for (var x = pL; x <= size - pR; x += s) {
          ctx.moveTo(x, pT)
          ctx.lineTo(x, size - pB)
        }
        for (var y = pT; y <= size - pB; y += s) {
          ctx.moveTo(pL, y)
          ctx.lineTo(size - pR, y)
        }
        ctx.stroke()
      }

      function drawAxes() {
        ctx.strokeStyle = "#000";
        ctx.lineWidth = 0.5;
        ctx.beginPath();

        const centerX = Math.round(nX / 2) * s + pL;
        const centerY = Math.round(nY / 2) * s + pT;

        // x-axis
        ctx.moveTo(pL, centerY);
        ctx.lineTo(size - pR, centerY);
        // y-axis
        ctx.moveTo(centerX, pT);
        ctx.lineTo(centerX, size - pB);
        ctx.stroke();
      }


      function drawCircle(x, y) {
        ctx.beginPath();
        ctx.arc(x, y, 6, 0, 2 * Math.PI);
        ctx.fillStyle = 'red';
        ctx.fill();
      }

      let circles = [];

      function handleClick(event) {
        const rect = canvas.getBoundingClientRect();
        const x = (event.clientX - rect.left) * (size / rect.width);
        const y = (event.clientY - rect.top) * (size / rect.height);

        const gridX = Math.round((x - pL) / s) * s + pL;
        const gridY = Math.round((y - pT) / s) * s + pT;

        circles.push({x: gridX, y: gridY});
        redrawCircles();
      }

      function redrawCircles() {
        ctx.clearRect(pL, pT, size- pL, size - pT );
        drawGrid();
        drawAxes();

        circles.forEach(circle => drawCircle(circle.x, circle.y));
      }

      drawGrid();
      drawAxes();

      canvas.addEventListener('click', handleClick);

      return () => {
        canvas.removeEventListener('click', handleClick);
      };
    }
  }, []);



  return (
    <>
      <Head>
        <title>Four Quadrants</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        className={`${styles.page}`}
      >
        <main className={styles.main}>
          <canvas
              ref={canvasRef}
              id="preview"
              width="600"
              height="600"
          ></canvas>

        </main>
      </div>
    </>
  );
}
